Metadata-Version: 2.4
Name: ExportMd
Version: 0.1.0
Summary: A Python package that executes code blocks within markdown and exports to various formats
Author-email: dgo8 <your.email@example.com>
Project-URL: Homepage, https://github.com/dgo8/ExportMd
Project-URL: Bug Tracker, https://github.com/dgo8/ExportMd/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: markdown>=3.3.0
Requires-Dist: beautifulsoup4>=4.9.0
Requires-Dist: plotly>=5.0.0
Requires-Dist: matplotlib>=3.4.0
Requires-Dist: numpy>=1.20.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: python-pptx>=0.6.0
Requires-Dist: pdf2docx>=0.5.0
Requires-Dist: weasyprint>=54.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: kaleido>=0.2.0
Dynamic: license-file


# Export Markdown to HTML, PDF, DOCX, PPTX. With Executed Code Blocks.

A Python package that executes Python code blocks within markdown documents and exports them to various formats (PDF, DOCX, PPTX, HTML). Perfect for creating data analysis reports with live code execution.

## Features

- **Code Execution**: Execute Python code blocks directly in your markdown
- **Multiple Export Formats**: Convert to PDF, DOCX, PPTX, and HTML
- **Data Visualization**: Support for Matplotlib, Plotly, and Seaborn
- **Custom Styling**: Choose from built-in styles or define your own CSS
- **Professional Output**: Generate publication-ready documents

## Installation

```bash
pip install -r requirements.txt
pip install ExportMd
```

## Quick Start

```python
import ExportMd

markdown_content = """
# Analysis Report

## Data Visualization

```python
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)
plt.plot(x, np.sin(x))
plt.title("Sine Wave")
plt.show()
```"""

output = ExportMd.to(
    markdown=markdown_content,
    style='style1', # default: 'style', 'style1', 'style2', 'style3', 'custom'
    format='pdf' # default: 'pdf', 'docx', 'pptx', 'html'
)

# Save to file
with open('output.pdf', 'wb') as f:
    f.write(output)
```

Parameters:
- `markdown`: Input markdown text
- `format`: Output format ('pdf', 'docx', 'pptx', 'html')
- `output_file`: Optional path to save the output
- `style`: CSS style to use (default: 'style', 'style1', 'style2', 'style3', 'custom')
- `custom_css`: Custom CSS string when style='custom'

Returns:
- `bytes`: Converted document as bytes

## Code Block Support

Use standard markdown code blocks with Python:

```python
# Print statements
print("Hello, World!")

# Matplotlib
import matplotlib.pyplot as plt
plt.plot([1, 2, 3], [1, 2, 3])
plt.show()

# Plotly
import plotly.express as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length")

# Seaborn
import seaborn as sns
tips = sns.load_dataset('tips')
sns.boxplot(data=tips, x='day', y='total_bill')
plt.show()
```

## Styling Options

### Built-in Styles

Choose from three built-in styles:
- `style1`: Corporate finance theme
- `style2`: Modern business theme
- `style3`: Clean documentation theme

```python
ExportMd.to(
    markdown=content,
    format='pdf',
    style='style2'
)
```

### Custom CSS

Apply your own styling:

```python
custom_css = """
body {
    font-family: Arial, sans-serif;
    max-width: 900px;
    margin: 0 auto;
}
"""

ExportMd.to(
    markdown=content,
    format='pdf',
    style='custom',
    custom_css=custom_css
)
```

## Pre-imported Libraries

The following libraries are available in Python code blocks:
- numpy (as np)
- pandas (as pd)
- matplotlib.pyplot (as plt)
- plotly.graph_objects (as go)
- plotly.express (as px)
- seaborn (as sns)

## Examples

See the [examples](examples/) directory for more detailed examples, including:
- Basic print statements
- Matplotlib visualizations
- Plotly interactive charts
- Seaborn statistical plots
- Complex data analysis reports

## License

MIT License - see LICENSE file for details.
